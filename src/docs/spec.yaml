openapi: 3.0.0
info:
  description: |
    Docs for defillama's open API
  version: 1.0.0-oas3
  title: DefiLlama API
tags:
  - name: TVL
    description: Retrieve TVL data
  - name: coins
    description: General blockchain data used by defillama and open-sourced
  - name: stablecoins
    description: Stablecoins data
  - name: yields
    description: Data from our yields/APY dashboard
  - name: abi-decoder
    description: Function and event signatures decoded
servers:
  - url: https://api.llama.fi
paths:
  /protocols:
    get:
      tags:
        - TVL
      summary: List all protocols on defillama along with their tvl
      responses:
        '200':
          description: successful operation
  /protocol/{protocol}:
    get:
      tags:
        - TVL
      summary: Get historical TVL of a protocol and breakdowns by token and chain
      parameters:
        - name: protocol
          in: path
          description: protocol slug
          required: true
          schema:
            type: string
            example: aave
      responses:
        '200':
          description: successful operation
  /charts:
    get:
      tags:
        - TVL
      summary: Get historical TVL of DeFi on all chains
      responses:
        '200':
          description: successful operation
  /charts/{chain}:
    get:
      tags:
        - TVL
      summary: Get historical TVL of a chain
      parameters:
        - name: chain
          in: path
          required: true
          description: chain slug, you can get these from /chains or the chains property on /protocols
          schema:
            type: string
            example: Ethereum
      responses:
        '200':
          description: successful operation
  /tvl/{protocol}:
    get:
      tags:
        - TVL
      summary: Simplified endpoint to get current TVL of a protocol
      description: Simplified endpoint that only returns a number, the current TVL of a protocol
      parameters:
        - name: protocol
          in: path
          required: true
          description: protocol slug
          schema:
            type: string
            example: uniswap
      responses:
        '200':
          description: successful operation
  /chains:
    get:
      tags:
        - TVL
      summary: Get current TVL of all chains
      responses:
        '200':
          description: successful operation
  /prices/current/{coins}:
    get:
      tags:
        - coins
      summary: Get current prices of tokens by contract address
      description: |
        The goal of this API is to price as many tokens as possible, including exotic ones that never get traded, which makes them impossible to price by looking at markets.
        
        The base of our data are prices pulled from coingecko, which is then extended through multiple means:
        - We price all bridged tokens by using the price of the token in it's original chain, so we fetch all bridged versions of USDC on arbitrum, fantom, avax... and price all them using the price for the token on Ethereum, which we know. Right now we support 10 different bridging protocols.
        - We have multiple adapters to price specialized sets of tokens by running custom code:
          - We price yearn's yToken LPs by checking how much underlying token can be withdrawn for each LP
          - Aave, compound and euler LP tokens are also priced based on their relationship against underlying tokens
          - Uniswap, curve, balancer and stargate LPs are priced using the underlying tokens in each pair
          - GMX's GLP token is priced based on the value of tokens given on withdrawal (which includes calculations based on trader's PnL)
          
          - Synthetix tokens are priced using forex prices of the coin they are pegged to
        - For tokens that we haven't been able to price in any other way, we find the pool with most liquidity for each on uniswap, curve and serum and then use the prices provided on those exchanges.
          
          Unlike all the other tokens, we can't confirm that these prices are correct, so we only ingest the ones that have sufficient liquidity and, even in that case, we attach a `confidence` value to them that is related to the depth of liquidity and which represents our confidence in the quality of each price. API consumers can choose to filter out prices with low confidence values.
          
         Our API server is fully open source and we are constantly adding more pricing adapters, extending the amount of tokens we support.
          
        Tokens are queried using {chain}:{address}, where chain is an identifier such as ethereum, bsc, polygon, avax... You can also get tokens by coingecko id by setting `coingecko` as the chain, eg: coingecko:ethereum, coingecko:bitcoin. Examples:
          - ethereum:0xdF574c24545E5FfEcb9a659c229253D4111d87e1
          - bsc:0x762539b45a1dcce3d36d080f74d1aed37844b878
          - coingecko:ethereum
          - arbitrum:0x4277f8f2c384827b5273592ff7cebd9f2c1ac258
      servers:
        - url: https://coins.llama.fi
      parameters:
        - name: coins
          in: path
          required: true
          description: set of comma-separated tokens defined as {chain}:{address}
          schema:
            type: string
            example: ethereum:0xdF574c24545E5FfEcb9a659c229253D4111d87e1,coingecko:ethereum,bsc:0x762539b45a1dcce3d36d080f74d1aed37844b878,ethereum:0xdB25f211AB05b1c97D595516F45794528a807ad8
      responses:
        '200':
          description: successful operation
          content:
            'application/json':
              schema:
                type: object
                properties:
                  coins:
                    type: object
                    properties:
                      "ethereum:0xdF574c24545E5FfEcb9a659c229253D4111d87e1":
                        type: object
                        properties:
                          decimals:
                            type: number
                            example: 8
                          price: 
                            type: number
                            example: 0.022053735051098835
                          "symbol": 
                            type: string
                            example: "cDAI"
                          "timestamp": 
                            type: number
                            example: 1663351225
        '502':
          description: Internal error
  /prices/historical/{timestamp}/{coins}:
    get:
      tags:
        - coins
      summary: Get historical prices of tokens by contract address
      description: See /prices/current for explanation on how prices are sourced.
      servers:
        - url: https://coins.llama.fi
      parameters:
        - name: coins
          in: path
          required: true
          description: set of comma-separated tokens defined as {chain}:{address}
          schema:
            type: string
            example: ethereum:0xdF574c24545E5FfEcb9a659c229253D4111d87e1,coingecko:ethereum,bsc:0x762539b45a1dcce3d36d080f74d1aed37844b878,ethereum:0xdB25f211AB05b1c97D595516F45794528a807ad8
        - name: timestamp
          in: path
          required: true
          description: UNIX timestamp of time when you want historical prices
          schema:
            type: number
            example: 1648680149
      responses:
        '200':
          description: successful operation
          content:
            'application/json':
              schema:
                type: object
                properties:
                  coins:
                    type: object
                    properties:
                      "ethereum:0xdF574c24545E5FfEcb9a659c229253D4111d87e1":
                        type: object
                        properties:
                          decimals:
                            type: number
                            example: 8
                          price: 
                            type: number
                            example: 0.022053735051098835
                          "symbol": 
                            type: string
                            example: "cDAI"
                          "timestamp": 
                            type: number
                            example: 1648680149
        '502':
          description: Internal error
  /block/{chain}/{timestamp}:
    get:
      tags:
        - coins
      summary: Get the closest block to a timestamp
      description: |
        Runs binary search over a blockchain's blocks to get the closest one to a timestamp.

        Every time this is run we add new data to our database, so each query permanently speeds up future queries.
      servers:
        - url: https://coins.llama.fi
      parameters:
        - name: chain
          in: path
          description: Chain which you want to get the block from
          required: true
          schema:
            type: string
        - name: timestamp
          in: path
          description: UNIX timestamp of the block you are searching for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            'application/json':
              schema:
                type: object
                properties:
                  height:
                    type: integer
                    format: uint
                    example: 11150916
                  timestamp:
                    type: integer
                    format: uint
                    example: 1603964988
        '400':
          description: Invalid chain or timestamp provided
  /stablecoins:
    get:
      tags:
        - stablecoins
      summary: List all stablecoins along with their circulating amounts
      servers:
        - url: https://stablecoins.llama.fi
      parameters:
        - name: includePrices
          in: query
          required: false
          description: set whether to include current stablecoin prices
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: successful operation
  /stablecoincharts/all:
    get:
      tags:
        - stablecoins
      summary: Get historical mcap sum of all stablecoins
      servers:
        - url: https://stablecoins.llama.fi
      parameters:
        - name: stablecoin
          in: query
          required: false
          description: stablecoin ID, you can get these from /stablecoins
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: successful operation
  /stablecoincharts/{chain}:
    get:
      tags:
        - stablecoins
      summary: Get historical mcap sum of all stablecoins in a chain
      servers:
        - url: https://stablecoins.llama.fi
      parameters:
        - name: chain
          in: path
          required: true
          description: chain slug, you can get these from /chains or the chains property on /protocols
          schema:
            type: string
            example: Ethereum
        - name: stablecoin
          in: query
          required: false
          description: stablecoin ID, you can get these from /stablecoins
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: successful operation
  /stablecoin/{asset}:
    get:
      tags:
        - stablecoins
      summary: Get historical mcap and historical chain distribution of a stablecoin
      servers:
        - url: https://stablecoins.llama.fi
      parameters:
        - name: asset
          in: path
          required: true
          description: stablecoin ID, you can get these from /stablecoins
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: successful operation
  /stablecoinchains:
    get:
      tags:
        - stablecoins
      summary: Get current mcap sum of all stablecoins on each chain
      servers:
        - url: https://stablecoins.llama.fi
      responses:
        '200':
          description: successful operation
  /stablecoinprices:
    get:
      tags:
        - stablecoins
      summary: Get historical prices of all stablecoins
      servers:
        - url: https://stablecoins.llama.fi
      responses:
        '200':
          description: successful operation
  /pools:
    get:
      tags:
        - yields
      summary: Retrieve the latest data for all pools, including enriched information such as predictions
      servers:
        - url: https://yields.llama.fi
      responses:
        '200':
          description: successful operation
  /chart/{pool}:
    get:
      tags:
        - yields
      summary: Get historical APY and TVL of a pool
      servers:
        - url: https://yields.llama.fi
      parameters:
        - name: pool
          in: path
          required: true
          description: pool id, can be retrieved from /pools (property is called pool)
          schema:
            type: string
            example: '747c1d2a-c668-4682-b9f9-296708a3dd90'
      responses:
        '200':
          description: successful operation
  /fetch/signature:
    get:
      tags:
        - abi-decoder
      summary: Get the ABI for a function or event signature.
      servers:
        - url: https://abi-decoder.llama.fi
      parameters:
      - name: functions
        in: query
        required: false
        description: function 4 byte signatures, you can add many signatures by joining them with ','
        schema:
          type: string
          example: "0x23b872dd,0x18fccc76,0xb6b55f25,0xf5d07b60"
      - name: events
        in: query
        required: false
        description: event signatures, you can add many signatures by joining them with ','
        schema:
          type: string
          example: "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef,0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67,0x4cc7e95e48af62690313a0733e93308ac9a73326bc3c29f1788b1191c376d5b6"
      responses:
        '200':
          description: successful operation
  /fetch/contract/{chain}/{address}:
    get:
      tags:
        - abi-decoder
      summary: Get the verbose ABI for a function or event signature for a particular contract
      servers:
        - url: https://abi-decoder.llama.fi
      parameters:
      - name: chain
        in: path
        required: true
        description: Chain the smart contract is located in
        schema:
          type: string
          enum:
            - arbitrum
            - avalanche
            - bsc
            - celo
            - ethereum
            - fantom
            - optimism
            - polygon
            - tron
          example: ethereum
      - name: address
        in: path
        required: true
        description: Address of the smart contract
        schema:
          type: string
          example: "0x02f7bd798e765369a9d204e9095b2a526ef01667"
      - name: functions
        in: query
        required: false
        description: function 4 byte signatures, you can add many signatures by joining them with ','
        schema:
          type: string
          example: "0xf43f523a,0x95d89b41,0x95d89b41,0x70a08231,0x70a08231"
      - name: events
        in: query
        required: false
        description: event signatures, you can add many signatures by joining them with ','
        schema:
          type: string
          example: "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef,0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
      responses:
        '200':
          description: successful operation